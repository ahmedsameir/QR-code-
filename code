<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/qrcode@1.5.4/build/qrcode.min.js"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }
        .transform { transform: translateZ(0); }
        .scale-105 { transform: scale(1.05); }
        .scale-102 { transform: scale(1.02); }
        .hover\:scale-105:hover { transform: scale(1.05); }
        .hover\:scale-102:hover { transform: scale(1.02); }
        .backdrop-blur-sm { backdrop-filter: blur(4px); }
    </style>
</head>
<body>
    <div id="app" class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 relative">
        <!-- Header -->
        <header class="relative overflow-hidden bg-gradient-to-r from-blue-600 to-purple-600 text-white">
            <div class="absolute inset-0 bg-black/10"></div>
            <div class="relative max-w-6xl mx-auto px-4 py-16 sm:py-20">
                <!-- User Info -->
                <div id="userInfo" class="absolute top-4 right-4 bg-white/10 backdrop-blur-sm rounded-lg px-4 py-2 flex items-center gap-2" style="display: none;">
                    <i data-lucide="user" class="w-4 h-4"></i>
                    <span class="text-sm" id="welcomeText">Welcome</span>
                </div>
                
                <div class="text-center">
                    <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold mb-6">
                        QR Code Generator
                    </h1>
                    <p class="text-xl sm:text-2xl text-blue-100 max-w-3xl mx-auto leading-relaxed">
                        Create beautiful QR codes instantly. Perfect for URLs, contact info, WiFi passwords, and more.
                    </p>
                </div>
            </div>
            <div class="absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-white/20 to-transparent"></div>
        </header>

        <!-- Main Content -->
        <main class="max-w-6xl mx-auto px-4 py-12">
            <div class="grid lg:grid-cols-2 gap-8 lg:gap-12">
                <!-- Input Section -->
                <div class="space-y-6">
                    <div class="bg-white rounded-2xl shadow-xl p-6 sm:p-8 border border-gray-100">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Generate Your QR Code</h2>
                        
                        <!-- Type Selection -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-3">Choose Type</label>
                            <div class="grid grid-cols-2 sm:grid-cols-3 gap-2" id="typeButtons">
                                <!-- Type buttons will be generated by JavaScript -->
                            </div>
                        </div>

                        <!-- Text Input -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2" id="inputLabel">
                                Text Content
                            </label>
                            <div class="relative">
                                <textarea
                                    id="inputText"
                                    placeholder="Enter any text..."
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none transition-all duration-200"
                                    rows="3"
                                >Hello, World!</textarea>
                            </div>
                        </div>

                        <!-- Options -->
                        <div class="grid sm:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Size</label>
                                <select id="sizeSelect" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="128">Small (128px)</option>
                                    <option value="256" selected>Medium (256px)</option>
                                    <option value="512">Large (512px)</option>
                                    <option value="1024">Extra Large (1024px)</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Error Correction</label>
                                <select id="errorCorrectionSelect" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="L">Low (7%)</option>
                                    <option value="M" selected>Medium (15%)</option>
                                    <option value="Q">Quartile (25%)</option>
                                    <option value="H">High (30%)</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Features -->
                    <div class="bg-gradient-to-r from-purple-50 to-blue-50 rounded-2xl p-6 border border-purple-100">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Features</h3>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                            <div class="flex items-center gap-2 text-sm text-gray-600">
                                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                                Real-time generation
                            </div>
                            <div class="flex items-center gap-2 text-sm text-gray-600">
                                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                                Multiple formats
                            </div>
                            <div class="flex items-center gap-2 text-sm text-gray-600">
                                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                                Customizable size
                            </div>
                            <div class="flex items-center gap-2 text-sm text-gray-600">
                                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                                High quality output
                            </div>
                        </div>
                    </div>
                </div>

                <!-- QR Code Display -->
                <div class="space-y-6">
                    <div class="bg-white rounded-2xl shadow-xl p-6 sm:p-8 border border-gray-100">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Your QR Code</h2>
                        
                        <div id="qrDisplay" class="text-center space-y-6">
                            <div class="inline-block p-4 bg-gray-50 rounded-2xl">
                                <img id="qrImage" src="" alt="Generated QR Code" class="max-w-full h-auto mx-auto" style="max-width: 300px; display: none;">
                                <div id="qrPlaceholder" class="w-32 h-32 bg-gray-100 rounded-2xl mx-auto mb-4 flex items-center justify-center">
                                    <div class="w-16 h-16 border-4 border-gray-300 border-dashed rounded-lg"></div>
                                </div>
                            </div>
                            
                            <div class="flex flex-col sm:flex-row gap-3 justify-center">
                                <button id="downloadBtn" class="flex items-center justify-center gap-2 px-6 py-3 font-medium rounded-lg transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white animate-pulse">
                                    <i data-lucide="download" class="w-4 h-4"></i>
                                    Sign Up to Download
                                </button>
                                <button id="copyBtn" class="flex items-center justify-center gap-2 px-6 py-3 font-medium rounded-lg transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white animate-pulse">
                                    <i data-lucide="copy" class="w-4 h-4"></i>
                                    Sign Up to Copy
                                </button>
                            </div>
                            
                            <div id="registrationPrompt" class="mt-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
                                <p class="text-sm text-gray-600 text-center">
                                    <strong>Free registration required</strong> to download or copy QR codes. 
                                    It only takes 30 seconds!
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Info Card -->
                    <div class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-100">
                        <h3 class="text-lg font-semibold text-gray-800 mb-3">How to Use</h3>
                        <ol class="text-sm text-gray-600 space-y-2">
                            <li class="flex items-start gap-2">
                                <span class="flex-shrink-0 w-5 h-5 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium">1</span>
                                Choose the type of content you want to encode
                            </li>
                            <li class="flex items-start gap-2">
                                <span class="flex-shrink-0 w-5 h-5 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium">2</span>
                                Enter your content in the text field
                            </li>
                            <li class="flex items-start gap-2">
                                <span class="flex-shrink-0 w-5 h-5 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium">3</span>
                                Customize size and error correction as needed
                            </li>
                            <li class="flex items-start gap-2">
                                <span class="flex-shrink-0 w-5 h-5 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium">4</span>
                                Download or copy your QR code
                            </li>
                        </ol>
                    </div>
                </div>
            </div>
        </main>

        <!-- Registration Modal -->
        <div id="registrationModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50" style="display: none;">
            <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6 sm:p-8 relative">
                <button id="closeModal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors">
                    <i data-lucide="x" class="w-5 h-5"></i>
                </button>
                
                <div class="text-center mb-6">
                    <div class="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i data-lucide="user" class="w-8 h-8 text-white"></i>
                    </div>
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Quick Registration</h2>
                    <p class="text-gray-600">Join thousands of users creating QR codes daily</p>
                </div>
                
                <form id="registrationForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                        <input type="text" id="userName" placeholder="Enter your full name" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                        <input type="email" id="userEmail" placeholder="Enter your email address" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200">
                    </div>
                    
                    <div id="registrationError" class="p-3 bg-red-50 border border-red-200 rounded-lg" style="display: none;">
                        <p class="text-sm text-red-600" id="errorMessage"></p>
                    </div>
                    
                    <button type="submit" class="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium py-3 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg">
                        Create Free Account & Download
                    </button>
                </form>
                
                <div class="mt-6 pt-4 border-t border-gray-200">
                    <div class="flex items-center justify-center gap-4 text-xs text-gray-500">
                        <div class="flex items-center gap-1">
                            <i data-lucide="check" class="w-3 h-3 text-green-500"></i>
                            100% Free
                        </div>
                        <div class="flex items-center gap-1">
                            <i data-lucide="check" class="w-3 h-3 text-green-500"></i>
                            No Spam
                        </div>
                        <div class="flex items-center gap-1">
                            <i data-lucide="check" class="w-3 h-3 text-green-500"></i>
                            Instant Access
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="bg-gray-50 border-t border-gray-200 mt-16">
            <div class="max-w-6xl mx-auto px-4 py-8">
                <div class="text-center text-gray-600">
                    <p class="text-sm">
                        © 2025 QR Code Generator. Create professional QR codes for any purpose.
                    </p>
                    <p id="userStatus" class="text-xs text-gray-500 mt-2" style="display: none;">
                        Logged in as <span id="userEmailDisplay"></span>
                    </p>
                </div>
            </div>
        </footer>
    </div>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Application state
        let currentUser = null;
        let selectedType = 'text';
        let qrDataURL = '';
        let copied = false;

        // Input types configuration
        const inputTypes = [
            {
                id: 'text',
                label: 'Text',
                icon: 'type',
                placeholder: 'Enter any text...'
            },
            {
                id: 'url',
                label: 'URL',
                icon: 'link',
                placeholder: 'https://example.com',
                prefix: 'https://'
            },
            {
                id: 'email',
                label: 'Email',
                icon: 'mail',
                placeholder: 'user@example.com',
                prefix: 'mailto:'
            },
            {
                id: 'phone',
                label: 'Phone',
                icon: 'phone',
                placeholder: '+1234567890',
                prefix: 'tel:'
            },
            {
                id: 'sms',
                label: 'SMS',
                icon: 'message-square',
                placeholder: '+1234567890:Hello!',
                prefix: 'sms:'
            },
            {
                id: 'wifi',
                label: 'WiFi',
                icon: 'wifi',
                placeholder: 'WIFI:T:WPA;S:NetworkName;P:Password;;'
            }
        ];

        // DOM elements
        const elements = {
            typeButtons: document.getElementById('typeButtons'),
            inputText: document.getElementById('inputText'),
            inputLabel: document.getElementById('inputLabel'),
            sizeSelect: document.getElementById('sizeSelect'),
            errorCorrectionSelect: document.getElementById('errorCorrectionSelect'),
            qrImage: document.getElementById('qrImage'),
            qrPlaceholder: document.getElementById('qrPlaceholder'),
            downloadBtn: document.getElementById('downloadBtn'),
            copyBtn: document.getElementById('copyBtn'),
            registrationPrompt: document.getElementById('registrationPrompt'),
            registrationModal: document.getElementById('registrationModal'),
            registrationForm: document.getElementById('registrationForm'),
            registrationError: document.getElementById('registrationError'),
            errorMessage: document.getElementById('errorMessage'),
            closeModal: document.getElementById('closeModal'),
            userName: document.getElementById('userName'),
            userEmail: document.getElementById('userEmail'),
            userInfo: document.getElementById('userInfo'),
            welcomeText: document.getElementById('welcomeText'),
            userStatus: document.getElementById('userStatus'),
            userEmailDisplay: document.getElementById('userEmailDisplay')
        };

        // Initialize type buttons
        function initializeTypeButtons() {
            elements.typeButtons.innerHTML = inputTypes.map(type => `
                <button
                    data-type="${type.id}"
                    class="type-btn flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                        type.id === selectedType
                            ? 'bg-blue-600 text-white shadow-md transform scale-105'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-102'
                    }"
                >
                    <i data-lucide="${type.icon}" class="w-4 h-4"></i>
                    ${type.label}
                </button>
            `).join('');
            
            lucide.createIcons();
            
            // Add event listeners
            document.querySelectorAll('.type-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    selectedType = btn.dataset.type;
                    updateTypeButtons();
                    updateInputPlaceholder();
                    generateQR();
                });
            });
        }

        // Update type button styles
        function updateTypeButtons() {
            document.querySelectorAll('.type-btn').forEach(btn => {
                if (btn.dataset.type === selectedType) {
                    btn.className = 'type-btn flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 bg-blue-600 text-white shadow-md transform scale-105';
                } else {
                    btn.className = 'type-btn flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-102';
                }
            });
        }

        // Update input placeholder and label
        function updateInputPlaceholder() {
            const typeData = inputTypes.find(t => t.id === selectedType);
            if (typeData) {
                elements.inputText.placeholder = typeData.placeholder;
                elements.inputLabel.textContent = `${typeData.label} Content`;
            }
        }

        // Generate QR code
        async function generateQR() {
            const text = elements.inputText.value.trim();
            if (!text) {
                elements.qrImage.style.display = 'none';
                elements.qrPlaceholder.style.display = 'flex';
                return;
            }

            try {
                const typeData = inputTypes.find(t => t.id === selectedType);
                const finalText = selectedType === 'text' || selectedType === 'wifi' 
                    ? text 
                    : (typeData?.prefix || '') + text;

                const options = {
                    errorCorrectionLevel: elements.errorCorrectionSelect.value,
                    width: parseInt(elements.sizeSelect.value),
                    margin: 2,
                    color: {
                        dark: '#1F2937',
                        light: '#FFFFFF'
                    }
                };

                qrDataURL = await QRCode.toDataURL(finalText, options);
                elements.qrImage.src = qrDataURL;
                elements.qrImage.style.display = 'block';
                elements.qrPlaceholder.style.display = 'none';
            } catch (err) {
                console.error('Error generating QR code:', err);
            }
        }

        // Show registration modal
        function showRegistrationModal() {
            elements.registrationModal.style.display = 'flex';
        }

        // Hide registration modal
        function hideRegistrationModal() {
            elements.registrationModal.style.display = 'none';
            elements.registrationError.style.display = 'none';
            elements.userName.value = '';
            elements.userEmail.value = '';
        }

        // Handle registration
        function handleRegistration(e) {
            e.preventDefault();
            elements.registrationError.style.display = 'none';

            const name = elements.userName.value.trim();
            const email = elements.userEmail.value.trim();

            if (!name || !email) {
                elements.errorMessage.textContent = 'Please fill in all fields';
                elements.registrationError.style.display = 'block';
                return;
            }

            if (!email.includes('@')) {
                elements.errorMessage.textContent = 'Please enter a valid email address';
                elements.registrationError.style.display = 'block';
                return;
            }

            // Simulate registration
            currentUser = { name, email };
            updateUserInterface();
            hideRegistrationModal();

            // Auto-download after registration
            setTimeout(() => {
                downloadQR();
            }, 500);
        }

        // Update user interface after registration
        function updateUserInterface() {
            if (currentUser) {
                elements.userInfo.style.display = 'flex';
                elements.welcomeText.textContent = `Welcome, ${currentUser.name}`;
                elements.userStatus.style.display = 'block';
                elements.userEmailDisplay.textContent = currentUser.email;
                elements.registrationPrompt.style.display = 'none';

                // Update buttons
                elements.downloadBtn.innerHTML = '<i data-lucide="download" class="w-4 h-4"></i>Download PNG';
                elements.downloadBtn.className = 'flex items-center justify-center gap-2 px-6 py-3 font-medium rounded-lg transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg bg-blue-600 hover:bg-blue-700 text-white';

                elements.copyBtn.innerHTML = '<i data-lucide="copy" class="w-4 h-4"></i>Copy Image';
                elements.copyBtn.className = 'flex items-center justify-center gap-2 px-6 py-3 font-medium rounded-lg transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg bg-gray-600 hover:bg-gray-700 text-white';

                lucide.createIcons();
            }
        }

        // Download QR code
        function downloadQR() {
            if (!currentUser) {
                showRegistrationModal();
                return;
            }

            if (!qrDataURL) return;

            const link = document.createElement('a');
            link.download = `qr-code-${Date.now()}.png`;
            link.href = qrDataURL;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Copy QR code to clipboard
        async function copyToClipboard() {
            if (!currentUser) {
                showRegistrationModal();
                return;
            }

            if (!qrDataURL) return;

            try {
                const response = await fetch(qrDataURL);
                const blob = await response.blob();
                await navigator.clipboard.write([
                    new ClipboardItem({ 'image/png': blob })
                ]);
                
                const originalHTML = elements.copyBtn.innerHTML;
                elements.copyBtn.innerHTML = '<i data-lucide="check" class="w-4 h-4"></i>Copied!';
                lucide.createIcons();
                
                setTimeout(() => {
                    elements.copyBtn.innerHTML = originalHTML;
                    lucide.createIcons();
                }, 2000);
            } catch (err) {
                console.error('Error copying to clipboard:', err);
            }
        }

        // Event listeners
        elements.inputText.addEventListener('input', generateQR);
        elements.sizeSelect.addEventListener('change', generateQR);
        elements.errorCorrectionSelect.addEventListener('change', generateQR);
        elements.downloadBtn.addEventListener('click', downloadQR);
        elements.copyBtn.addEventListener('click', copyToClipboard);
        elements.closeModal.addEventListener('click', hideRegistrationModal);
        elements.registrationForm.addEventListener('submit', handleRegistration);

        // Close modal when clicking outside
        elements.registrationModal.addEventListener('click', (e) => {
            if (e.target === elements.registrationModal) {
                hideRegistrationModal();
            }
        });

        // Initialize the application
        initializeTypeButtons();
        generateQR();
    </script>
</body>
</html>
